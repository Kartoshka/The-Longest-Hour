using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// A command-pattern interface for run-time actions.
/// </summary>
public abstract class ActionCommand
{
	//////////////////////////////////////////////////////////////////////////////////////////
	#region Datatypes
	//////////////////////////////////////////////////////////////////////////////////////////

	#endregion
	//////////////////////////////////////////////////////////////////////////////////////////
	#region Attributes
	//////////////////////////////////////////////////////////////////////////////////////////

	private ActionManager m_actionManager;
	private Observer<ActionCommand> m_observer;

	#endregion
	//////////////////////////////////////////////////////////////////////////////////////////
	#region Constructors
	//////////////////////////////////////////////////////////////////////////////////////////

	public ActionCommand()
	{
		m_observer = new Observer<ActionCommand>(this);
	}

	#endregion
	//////////////////////////////////////////////////////////////////////////////////////////
	#region Accessors
	//////////////////////////////////////////////////////////////////////////////////////////

	public void setActionManager(ActionManager actionManager) { m_actionManager = actionManager; }

	#endregion
	//////////////////////////////////////////////////////////////////////////////////////////
	#region Methods
	//////////////////////////////////////////////////////////////////////////////////////////  

	// Returns true if the action was successfully executed.
	public abstract bool execute();

	protected virtual void onFinished()
	{
		m_observer.notify();
        if (m_actionManager != null)
		{
			m_actionManager.onActionFinished();
		}
	}

	#endregion
}
